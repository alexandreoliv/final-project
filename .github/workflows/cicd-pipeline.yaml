name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'expensy_frontend/**'
      - 'expensy_backend/**'
      - 'kubernetes/**'
      - '.github/workflows/**'
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'expensy_frontend/**'
      - 'expensy_backend/**'
      - 'kubernetes/**'
      - '.github/workflows/**'
      - 'terraform/**'

jobs:
  # Continuous Integration job
  build:
    runs-on: ubuntu-24.04
    
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Filter paths
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          frontend:
            - 'expensy_frontend/**'
          backend:
            - 'expensy_backend/**'
          kubernetes:
            - 'kubernetes/**'
          terraform:
            - 'terraform/**'
          github_workflows:
            - '.github/workflows/**'
          
    - name: Print Changed Directories
      run: |
        if [ "${{ steps.filter.outputs.frontend }}" == "true" ]; then
          echo "The 'expensy_frontend' directory was changed."
        fi
        if [ "${{ steps.filter.outputs.backend }}" == "true" ]; then
          echo "The 'expensy_backend' directory was changed."
        fi
        if [ "${{ steps.filter.outputs.kubernetes }}" == "true" ]; then
          echo "The 'kubernetes' directory was changed."
        fi
        if [ "${{ steps.filter.outputs.terraform }}" == "true" ]; then
          echo "The 'terraform' directory was changed."
        fi
        if [ "${{ steps.filter.outputs.github_workflows }}" == "true" ]; then
          echo "The '.github/workflows' directory was changed."
        fi

    - name: Print Environment Variables
      run: |
        echo "Frontend changes: ${{ steps.filter.outputs.frontend }}"
        echo "Backend changes: ${{ steps.filter.outputs.backend }}"

    # Log in to DockerHub
    - name: Log in to DockerHub
      if: ${{ steps.filter.outputs.frontend == 'true' || steps.filter.outputs.backend == 'true' }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Conditionally build and push frontend image
    - name: Build and Push Frontend Image
      if: ${{ steps.filter.outputs.frontend == 'true' }}
      run: |
        docker build -f expensy_frontend/Dockerfile -t alexandrebo/final-project-frontend:${{ github.sha }} ./expensy_frontend
        docker push alexandrebo/final-project-frontend:${{ github.sha }}

    # Conditionally build and push backend image
    - name: Build and Push Backend Image
      if: ${{ steps.filter.outputs.backend == 'true' }}
      run: |
        docker build -f expensy_backend/Dockerfile -t alexandrebo/final-project-backend:${{ github.sha }} ./expensy_backend
        docker push alexandrebo/final-project-backend:${{ github.sha }}

  # Terraform Infrastructure Creation
  terraform:
    needs: build
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3.1.2
      with:
        terraform_version: 1.10.5

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Terraform configuration for EKS cluster, EBS volume, AWS Load Balancer etc
    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve

  # Continuous Delivery job
  deploy:
    needs: [build, terraform]
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
    
    - name: Check kubectl version
      run: kubectl version --client 

    - name: Print Environment Variables
      run: |
        echo "needs.build.outputs.frontend = ${{ needs.build.outputs.frontend }}"
        echo "needs.build.outputs.backend = ${{ needs.build.outputs.backend }}"

    - name: Update image tag and commit changes to Kubernetes YAML files
      if: ${{ needs.build.outputs.frontend == 'true' || needs.build.outputs.backend == 'true' }}
      run: |
        git config --local user.name "GitHub Actions"
        git config --local user.email "actions@github.com"

        # Update and stage the frontend deployment YAML
        if [ "${{ needs.build.outputs.frontend }}" == "true" ]; then
          sed -i "s|image: alexandrebo/final-project-frontend:.*|image: alexandrebo/final-project-frontend:${{ github.sha }}|" ./kubernetes/frontend-deployment.yaml
          echo "Frontend image tag updated in frontend-deployment.yaml."
          git add ./kubernetes/frontend-deployment.yaml
        fi

        # Update and stage the backend deployment YAML
        if [ "${{ needs.build.outputs.backend }}" == "true" ]; then
          sed -i "s|image: alexandrebo/final-project-backend:.*|image: alexandrebo/final-project-backend:${{ github.sha }}|" ./kubernetes/backend-deployment.yaml
          echo "Backend image tag updated in backend-deployment.yaml."
          git add ./kubernetes/backend-deployment.yaml
        fi

        # Debugging: Show the current status and staged changes
        git status

        git commit -m "update Docker image tags for frontend and/or backend"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main
        echo "New image(s) commited to main."
        
    - name: Deploy to EKS
      run: |
        kubectl apply -f ./kubernetes/namespace.yaml
        kubectl apply -f ./kubernetes/backend-secrets.yaml
        kubectl apply -f ./kubernetes/frontend-configmap.yaml
        kubectl apply -f ./kubernetes/backend-configmap.yaml
        kubectl apply -f ./kubernetes/mongo-storage.yaml
        kubectl apply -f ./kubernetes/mongo-deployment.yaml
        kubectl apply -f ./kubernetes/redis-deployment.yaml
        kubectl apply -f ./kubernetes/frontend-deployment.yaml
        kubectl apply -f ./kubernetes/backend-deployment.yaml
        kubectl apply -f ./kubernetes/mongo-service.yaml
        kubectl apply -f ./kubernetes/frontend-service.yaml
        kubectl apply -f ./kubernetes/redis-service.yaml
        kubectl apply -f ./kubernetes/backend-service.yaml
        kubectl apply -f ./kubernetes/ingress-app.yaml
        kubectl apply -f ./kubernetes/ingress-prometheus.yaml
        kubectl apply -f ./kubernetes/ingress-grafana.yaml
        kubectl apply -f ./kubernetes/autoscaler.yaml